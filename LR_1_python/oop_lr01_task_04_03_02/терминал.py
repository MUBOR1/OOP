# Программирование на языке высокого уровня (Python).
# Задание №04_03_02. Вариант 02
#
# Выполнил: Хасензода Муборакшох .Л.
# Группа: ПИН-б-о-22-1
# E-mail: muborremix@gmail.com


from пицца import ПиццаПепперони, ПиццаБарбекю, ПиццаДарыМоря
from заказ import Заказ


class Терминал:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    КОМПАНИЯ = "Пиццерия 1"
    КОМАНДА_ОТМЕНА_ЗАКАЗА = -1
    КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА = 0

    def __init__(self):
        """Конструктор класса.

        self.меню: список доступных пицц;
        self.заказ: список заказанных пицц;
        self.отображать_меню: определяет отображение меню
                              равен True: при создании терминала,
                              после отмены или подтверждения заказа.
        """
        self.меню = [ПиццаПепперони(), ПиццаБарбекю(), ПиццаДарыМоря()]
        self.заказ = None
        self.отображать_меню = True

    def __str__(self):
        return "Пиццерия: {name}\nВерсия 1.0\n".format(name=Терминал.КОМПАНИЯ)

    def показать_меню(self):
        if not self.отображать_меню:
            return

        self.отображать_меню = False
        line = "\n{name}\nДобро пожаловать!\n".format(name=Терминал.КОМПАНИЯ)

        for i, пицца in enumerate(self.меню):
            line += "{index}. ".format(index=i + 1)
            line += str(пицца)
            line += "\n"

        line += "Для выбора укажите цифру через <ENTER>.\n"
        line += "Для отмены заказа введите -1\n"
        line += "Для подтверждения заказа введите 0\n"
        line += "\n"
        print(line)

    def обработать_команду(self, пункт_меню):
        try:
            пункт_меню = int(пункт_меню)
            if пункт_меню == Терминал.КОМАНДА_ОТМЕНА_ЗАКАЗА:
                if not (self.заказ is None):
                    self.заказ = None

                print("Заказ отменен!\n")
                self.отображать_меню = True

            elif пункт_меню == Терминал.КОМАНДА_ПОДТВЕРЖДЕНИЕ_ЗАКАЗА:
                if not isinstance(self.заказ, Заказ):
                    raise Exception

                print("Заказ подтвержен.")
                print(self.заказ)
                self.отображать_меню = True
                self.принять_оплату()
                self.заказ.выполнить()
                self.заказ = None

            elif 1 <= пункт_меню <= len(self.меню):
                if self.заказ is None:
                    self.заказ = Заказ()
                self.заказ.добавить(self.меню[пункт_меню - 1])
                print("Пицца {name_pizza} добавлена!".format(
                    name_pizza=self.меню[пункт_меню - 1].название))

            else:
                raise ValueError("Не могу распознать команду! Проверьте ввод.")
        except ValueError as err:
            print(err)
        except Exception:
            print("Во время работы терминала произошла ошибка...")

    def рассчитать_сдачу(self, оплата):
        if оплата < self.заказ.сумма():
            raise ValueError("Не достаточная сумма денег для заказа!")
        else:
            return оплата - self.заказ.сумма()

    def принять_оплату(self):
        try:
            оплата = int(input("Введите сумму: "))
            print("Вы внесли {:.2f} р. Сдача: {:.2f} р.".format(
                оплата, self.рассчитать_сдачу(оплата)))
        except Exception:
            print("Оплата не удалась. Заказ будет отменен.")
            raise
